
#ifndef SHIPCLASSES_EVENTS_H
#define SHIPCLASSES_EVENTS_H
#include "ship.h"
#include <iostream>

class AllEvents {
    int result;
public:
    inline void EventAsteroidBelt(Eventfull* object) {
        result = object->AsteroidBelt();
        if(result == 0) {
            std::cout <<"Geminiz hasar almayacak!" <<"\n";
        }
        else(result == 1) {
            object->decrementHp(10);
            std::cout <<"Geminiz 10 hasar alacak" <<"\n";
        }

    }

    inline void EventAbandonedPlanet(Eventfull* object) {
        result = object->AbandonedPlanet();
        if(result == 0) {
            object->incrementMoney();
            std::cout <<"10 altın kazandınız\n";
        }
        else {
            std::cout <<"Korsanlar geliyor\n";

        }

    }

    friend class MainShip;
};

class Pirates : public AllEvents{

private:
    int resultEscape;
    int resultFight;
    int resultBargain;
    int resultBargainQuantity;
    bool BargainCondition;
public:
    std::cout<<"Korsanlardan kacmayi deniyorsunuz\n";
    bool PiratesEscapeKosul = 1; //pirate lerin senin kaçma durumunda yakalama durumu 1, kaçma durumu 0
    inline void EventPiratesEscape(Eventfull* object){
        while (PiratesEscapeKosul == 1){
            resultEscape = object->PiratesEscape();
            if (resultEscape == 0){
                std::cout<<"Korsanlardan kactiniz\n";
                PiratesEscapeKosul = 0; // burada korsanlardan kaçıyorsun
            }
            else {
                std::cout<<"Korsanlar sizi yakaladi.\n";
            }
        }
    }

    inline void EventPiratesFight(Eventfull* object){
        std::cout<<"Korsanlarla savasmayi sectiniz.\n";
        resultFight = object->PiratesFight();
        if (resultFight == 0){
            std::cout<<"kazandiniz\n";
        }
        else {
            object->decrementHp(30);
            std::cout<<"yenildiniz\n";
        }
    }

    inline void EventPiratesBargain(Eventfull* object){ // pazarlık edilecek miktar hesaplanır ve eğer eldeki miktar daha büyükse ödenir.
        resultBargain = object->PiratesBargain(); // daha en başında pazarlık edilip edilemeyeceği game fonksiyonunda incelenecek
        if (resultBargain == 1){
            resultBargainQuantity = 10;
        }
        else if (resultBargain == 2){
            resultBargainQuantity = 20;
        }
        else {
            resultBargainQuantity = 30;
        }
        if (object->money >= resultBargainQuantity){
            object->decrementMoney(resultBargainQuantity);
            std::cout<<"Pazarlik ettiniz ve "<<resultBargainQuantity<<" altin odediniz\n";
        }

    }

    friend class MainShip;
};
#endif //SHIPCLASSES_EVENTS_H
