#include <cstdlib>
#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <cctype>
#include <ctime>


static int result{0};
int resultEscape;
int PiratesChoiceNumber;
bool PiratesChoiceNumberCorrectness;
bool BargainCondition;
bool GameControl = true; // başlangıçta döngüye girsin diye true. her event sonu yakit ve can kontrolü yapacak

static constexpr float RSexapeX{1.5};
static constexpr float HSexapeX{0.5};
static constexpr float RSdamageX{1.5};
static constexpr float HSdamageX{0.5};
static constexpr int FuelDecrementor{33};

class Randomizer {
public:

    [[nodiscard]] int firstRandom(){  // firstRandom hangi event'in geleceğini belirliyor. 1 AsteroidBelt'e, 2 AbandonedPlanet'e ve 3 PiratesEscape'e gidiyor.
        int FirstRandomResult{0};
        FirstRandomResult = 1 + rand() % 3;
        return FirstRandomResult;
    }

    [[nodiscard]] int AsteroidBelt(float x)const{
        int AsteroidResult;
        AsteroidResult = 0; // burada her if'de eğer 0 gelirse gemi hasar almayacak, 1 gelirse 10 hasar alacak
        if ( x == 0.5f){
            AsteroidResult = 1 + rand()%4;
            if (AsteroidResult == 1){
                return 0;
            }
            else {
                return 1;
            }
        }
        else if (x == 1.0f) {
            AsteroidResult = 1 + rand()%4;
            if (AsteroidResult == 2 || AsteroidResult == 1) {
                return 0;
            }
            else {
                return 1;
            }
        }
        else if(x == 1.5f) {
            AsteroidResult = 1 + rand() % 4;
            if (AsteroidResult == 1 || AsteroidResult == 2 || AsteroidResult == 3) {
                return 0;
            }
            else {
                return 1;
            }
        }
        return 13;
    }

    [[nodiscard]] int AbandonedPlanet(){
        int AbandonedResult{0};
        AbandonedResult = rand()%2; // 0 gelirse para, 1 gelirse korsanlar gelecek
        return AbandonedResult;
    }

    [[nodiscard]] int PiratesEscape(float x) {
        int PiratesEscapeResult{0}; // 0 gelirse gemi kaçacak 1 gelirse gemi kaçamayacak
        if (x == 0.5f) {
            PiratesEscapeResult = 1 + rand() % 4;
            if (PiratesEscapeResult == 1) {
                return 0;
            }
            else {
                return 1;
            }
        }
        else if (x == 1.0f) {
            PiratesEscapeResult = 1 + rand() % 4;
            if (PiratesEscapeResult == 1 || PiratesEscapeResult == 2) {
                return 0;
            }
            else {
                return 1;
            }
        }
        else if (x == 1.5f) {
            PiratesEscapeResult = 1 + rand() % 4;
            if (PiratesEscapeResult == 1 || PiratesEscapeResult == 2 || PiratesEscapeResult == 3) {
                return 0;
            }
            else {
                return 1;
            }
        }
        return 13;
    }

    [[nodiscard]] int PiratesFight(){
        int PiratesFightResult{0};
        PiratesFightResult = rand()%2;// 0 gelirse kazancak, 1 gelirse kaybedip 30 hasar alacak
        if (result == 0){
            return 0;
        }
        else if(PiratesFightResult == 1){
            return 1;
        }
        return 13;
    }

    [[nodiscard]] int PiratesBargain(){
        int PiratesBargainResult{0};
        PiratesBargainResult = 1 + rand()%3; // 1 gelirse 10, 2 gelirse 20, 3 gelirse 30 isteyecekler
        switch(PiratesBargainResult){
            case 1:
                return 10;
            case 2:
                return 20;
            case 3:
                return 30;
        }
        return 13;
    }

};



class MainShip : public Randomizer{
public:
    int fuel;
    float hp;
    int money;
    float damageX;
    float escapeX;

public:
    MainShip(){
        fuel = 99;
        hp = 100.0f;
        money = 0;
        damageX =1;
        escapeX =1;
        std::cout << "constructor of MainShip" << "\n";
    }

    inline virtual void incrementMoney(){}
    inline virtual void decrementMoney(int DMvalue){}
    inline virtual void decrementFuel(){}
    inline virtual void decrementHp(float DHvalue){}
    inline virtual void decrementHpAsteroid(){}

};

class NormalShip : public MainShip{
public:
    NormalShip() : MainShip(){
        std::cout << "constructor of NormalShip" << "\n";
    }

public:
    void incrementMoney() override{
        money = money+10;
    }
    void decrementMoney(int DMvalue) override{
        money = money - DMvalue;
    }
    void decrementFuel() override{
        fuel = fuel-FuelDecrementor;
    }
    void decrementHp(float DHvalue) override{
        hp = hp - (DHvalue * damageX);
    }
    void decrementHpAsteroid() override{
        hp = hp - 10;
    }
};

class RapidShip : public MainShip{
public:
    RapidShip() : MainShip(){
        escapeX = escapeX * RSexapeX;
        damageX = damageX * RSdamageX;
        std::cout << "constructor of RapidShip" << "\n";
    }

public:
    void incrementMoney() override{
        money = money+10;
    }
    void decrementMoney(int DMvalue) override{
        money = money - DMvalue;
    }
    void decrementFuel() override{
        fuel = fuel-FuelDecrementor;
    }
    void decrementHp(float DHvalue) override{
        hp = hp - (DHvalue * damageX);
    }
    void decrementHpAsteroid() override{
        hp = hp - 10;
    }
};

class HeavyShip : public MainShip{
public:
    HeavyShip() : MainShip(){
        escapeX = escapeX * HSexapeX;
        damageX = damageX * HSdamageX;
        std::cout << "constructor of HeavyShip: " << "\n";
    }

public:
    void incrementMoney() override{
        money = money+10;
    }
    void decrementMoney(int DMvalue) override{
        money = money - DMvalue;
    }
    void decrementFuel() override{
        fuel = fuel - FuelDecrementor;
    }
    void decrementHp(float DHvalue) override{
        hp = hp - (DHvalue * damageX);
    }
    void decrementHpAsteroid() override{
        hp = hp - 10;
    }
};

void EventPiratesEscape(MainShip* object);
void PiratesChoices(MainShip* object);
void EventPiratesFight(MainShip* object);
void EventPiratesBargain(MainShip* object);
void ShipChoosing(const std::vector<std::string>& ShipTypes, std::string ChosenType);
void print();
void SetPointer(RapidShip &RShip, HeavyShip &HShip, NormalShip &NShip, MainShip* GameObject, const std::vector<std::string>& ShipTypes, const std::string& ChosenType);

void EventAsteroidBelt(MainShip* object) {
    puts("Asteroid kusagina girmektesiniz!!!");
    int EventAsteroidResult{0}; // 0 gelirse hasar almıyor öbür ihtimalde hasar alıyor.
    EventAsteroidResult = object->AsteroidBelt(object->escapeX);
    if(EventAsteroidResult == 0) {
        std::cout <<"Sanslisiniz geminiz asteroidlerden kacti geminiz hasar almayacak!" <<"\n";
    }
    else {
        object->decrementHpAsteroid();
        std::cout <<"Olamaz geminize asteroid carpti 10 hasar aldiniz!" <<"\n";
    }
}

int EventAbandonedPlanet(MainShip* object) {
    puts("Terk edilmis bir gezegen bulundu.");
    int EventAbandonedResult{0};
    EventAbandonedResult = object->AbandonedPlanet();
    if(EventAbandonedResult == 0) {
        object->incrementMoney();
        std::cout <<"Sanslisiniz bu bereketli topraklarda 10 altin buldunuz!" << "\n";
        return 0;
    }
    else {
       std::cout<<"OLAMAZ! Bu gezegende saklanan uzay korsanlari ile karsi karsiyayiz" << "\n";
        // burada 1 return edildiğinde GameFunctionda korsanlar çağrılacak
        return 1;
    }
}


void PiratesChoices(MainShip* object) {
    puts("DIKKAT uzay korsanlari hemen onumuzde!");
    int BargainValue{0};
    BargainValue = (object->PiratesBargain()); //pazarlık edilecek para miktarı.
    if(BargainValue <= object->money){
        BargainCondition = true;
    }
    else if(BargainValue > object->money){
        BargainCondition = false;
    }

    PiratesChoiceNumberCorrectness = false; // her defasında kontrol ediyor
    PiratesChoiceNumber = 0;
    std::cout<<"Kacmak icin (1), savasmak icin (2), pazarlik etmek icin (3)(-"<<BargainValue<<" altin)"<<"\n";
    while (!PiratesChoiceNumberCorrectness){
        std::cout<<"Ne yapmak istediginizi giriniz:";
        std::cin>>PiratesChoiceNumber;
        if (PiratesChoiceNumber == 1 || PiratesChoiceNumber == 2 || PiratesChoiceNumber == 3){
            if (PiratesChoiceNumber == 1){
                EventPiratesEscape(object);
            }
            else if (PiratesChoiceNumber == 2){
                EventPiratesFight(object);
            }
            else if (PiratesChoiceNumber == 3){
                EventPiratesBargain(object);
            }
            PiratesChoiceNumberCorrectness = true;
        }
        else {
            std::cout<<"Bu kadar zor degil lutfen gecerli bir sayi giriniz";
        }
    }
}

void EventPiratesFight(MainShip* object){
    std::cout<<"Korsanlarla savasa gidiyoruz tanrı turku korusun.\n";
    int resultFight{0};
    resultFight = object->PiratesFight();
    if (resultFight == 0){
        std::cout<<"Korsanlari tuzla buz ettiniz! \n";
    }
    else {
        object->decrementHp(30);
        std::cout<<"Korsanlar ile olan cesur savasimizi kaybettik gemimizin"<< object->hp << "kadar cani kaldi \n";
    }
}

 void EventPiratesBargain(MainShip* object){ // pazarlık edilecek miktar hesaplanır ve eğer eldeki miktar daha büyükse ödenir.
    int ResultBargain;
    ResultBargain = 0;
    ResultBargain = object->PiratesBargain();
    if (BargainCondition == true){
        object->decrementMoney(ResultBargain);
        std::cout<<"Pazarlik ettiniz ve "<<ResultBargain<<" altin odediniz\n";
    }
    else {
        std::cout<<"Yeterli altininiz yok, pazarlik etmek gibi bir secenegimiz yok...Secenek menusune donuluyor\n";
        PiratesChoices(object);
    }
}

void EventPiratesEscape(MainShip* object){
   int EventEscapeResult{0};
    EventEscapeResult = object->PiratesEscape(object->escapeX);
    if (object->fuel >= 33){
        if (EventEscapeResult == 0){
            object->decrementFuel();
            std::cout<<"33 yakıt kaybetmis olsaniz da korsanlardan kacip kurtuldunuz\n";
        }
        else {
            std::cout<<"Korsanlardan kacmayi basaramadiniz... Secenek menusune geri donuyorsunuz\n";
            PiratesChoices(object);
        }
    }
    else{
        std::cout << "Geminin yeterli yakiti kalmamıs ve zor durumdayiz tek care savasmak veya masaya oturup pazarlik etmek" << "\n";
    }
}

 inline void ScoreCalculator(MainShip* obj){
    float FinalScore{0};
    FinalScore = static_cast<float>(obj->fuel) * 5 + static_cast<float>(obj->money) * 10 + (obj->hp) * 10;
    std::cout<<"Oyun sonu skorunuz: "<<FinalScore;
}

inline void GameFunction(MainShip* obj){
    int GameType{0};
    bool EAPsituation{false};

    for(int turn = 0; turn < 5; ++turn) {
        if (obj->fuel <= 0 || obj->hp <= 0){
            std::cout<<"Yeterli yakitiniz veya saglik degeriniz yok. Yolculugun sonuna geldiniz....\n";
            break;
        }
        GameType = obj->firstRandom();
        std::cout<<turn+1<<".eventtesiniz\n";
        puts("");
        std::cout << "oyun turu" << GameType << "\n";
        puts("");
        if (GameType == 1) {
            EventAsteroidBelt(obj);
        } else if (GameType == 2) {
            EAPsituation = EventAbandonedPlanet(obj);
            if(EAPsituation == 1){
                PiratesChoices(obj);
            }
        } else if (GameType == 3) {
            PiratesChoices(obj);
        }
        puts("");
        std::cout<<"Event sonundaki degerleriniz--> hp:"<<obj->hp<<"  altin:"<<obj->money<<"  yakit:"<<obj->fuel<<"\n";
        puts("");
    }
    ScoreCalculator(obj);
}

inline void LowerCase(std::string &ToLower){

    std::transform(ToLower.begin(), ToLower.end(), ToLower.begin(), ::tolower);
}


void ShipChoosing(const std::vector<std::string>& ShipTypes, std::string ChosenType){

    LowerCase(ChosenType);


    for(const std::string &ShipType : ShipTypes){
        if(ChosenType == ShipType){
            puts("gecerli bir tur girdiniz");
            break;
        }
        else if(ShipType == ShipTypes.back()){
            puts("gecerli bir sonuc girmedin bitch");
        }
    }


}

void SetPointer(RapidShip &RShip, HeavyShip &HShip, NormalShip &NShip, MainShip* GameObject, const std::vector<std::string>& ShipTypes, const std::string& ChosenType){

    if(ChosenType == ShipTypes.at(0)){
        GameObject = &RShip;
        puts("hizli gemi olusturuldu");
        GameFunction(GameObject);


    }
    else if(ChosenType == ShipTypes.at(1)){
        GameObject = &HShip;
        puts("guclu gemi olusturuldu");
        GameFunction(GameObject);

    }
    else if(ChosenType == ShipTypes.at(2)){
        GameObject = &NShip;
        puts("Normal gemi olusturuldu");
        GameFunction(GameObject);

    }

}

void print(){
    puts("oyunumuza hosgeldiniz");
    puts("3 tip gemimiz bulunmaktadir hizli gemi, guclu gemi ve normal gemi hangisini secmek istersiniz");
    puts("hizli, guclu veya normal yaziniz");
}

int main() {
    srand(time(NULL));
    std::string ChosenType;
    std::vector<std::string>ShipTypes{"hizli", "guclu", "normal"};
    RapidShip RShip;
    NormalShip NShip;
    HeavyShip HShip;
    MainShip *GameObject= nullptr;

    print();
    std::getline(std::cin, ChosenType);

    ShipChoosing(ShipTypes, ChosenType);

    SetPointer(RShip, HShip, NShip, GameObject, ShipTypes, ChosenType);
    return 0;


}
