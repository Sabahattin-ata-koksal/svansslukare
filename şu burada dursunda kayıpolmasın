#ifndef SHIPCLASSES_SHIPS_H
#define SHIPCLASSES_SHIPS_H

#include <iostream>
#include "events.h"
#include "GameFunction.h"
#include <cstdlib>

class Randomizer {
public:

    int firstRandom(){
        srand(time(NULL));
        int result = 1 + rand()%3;
        return result;
    }

    int AsteroidBelt(float x){
        int xYeni = int(x) * 10;
        int result1, result2, result3 = 0;
        srand(time(NULL)); // burada her case'te eğer 0 gelirse gemi hasar almayacak, 1 gelirse 10 hasar alacak
        switch(xYeni){
            case 5:
                result1 = 1 + rand()%4;
                if (result1 == 0){
                    return 0;
                }
                else{
                    return 1;
                }

            case 10:
                result2 = 1 + rand()%4;
                if (result2 <= 2){
                    return 0;
                }
                else{
                    return 1;
                }

            case 15:
                result3 = 1 +rand()%4;
                if (result3 <= 3){
                    return 0;
                }
                else{
                    return 1;
                }

        }

    }

    int AbandonedPlanet(){
        srand(time(NULL));
        int result = rand()%2; // 0 gelirse para, 1 gelirse korsanlar gelecek
        return result;
    }


    int PiratesEscape(float x){
        int xYeni = int(x) * 10;
        int result1, result2, result3 = 0;
        srand(time(NULL)); // kaçabilmek için hepsinde 0 gelmesi lazım
        switch(xYeni){
            case 5:
                result1 = 1 + rand()%4;
                if (result1 == 0){
                    return 0;
                }
                else{
                    return 1;
                }

            case 10:
                result2 = 1 + rand()%4;
                if (result2 <= 2){
                    return 0;
                }
                else{
                    return 1;
                }

            case 15:
                result3 = 1 + rand()%4;
                if (result3 <= 3){
                    return 0;
                }
                else{
                    return 1;
                }
        }
    }

    int PiratesFight(){
        srand(time(NULL)); // 0 gelirse bi şey yok, 1 gelirse 30 hasar alacak
        int result = rand()%2;
        if (result == 0){
            return 0;
        }
        else if(result == 1){
            return 1;
        }
    }

    int PiratesBargain(){
        srand(time(NULL)); // 1 gelirse 10, 2 gelirse 20, 3 gelirse 30 isteyecekler
        int result = 1 + rand()%3;
        switch(result){
            case 1:
                return 1;
            case 2:
                return 2;
            case 3:
                return 3;
        }

    }

};

class MainShip;
class Eventfull;


class AllEvents : public Randomizer{
    int result = 0; // sonradan bunun yerine trash value atamasın diye initialize edildi
public:
    inline void EventAsteroidBelt(Eventfull* object) {
        result = object->AsteroidBelt();
        if(result == 0) {
            std::cout <<"Geminiz hasar almayacak!" <<"\n";
        }
        else {
            object->decrementHp(10);
            std::cout <<"Geminiz 10 hasar alacak" <<"\n";
        }

    }

    inline void EventAbandonedPlanet(Eventfull* object) {
        result = object->AbandonedPlanet();
        if(result == 0) {
            object->incrementMoney();
            std::cout <<"10 altın kazandınız\n";
        }
        else {
            std::cout <<"Korsanlar geliyor\n";
            object->PiratesChoices();

        }

    }

    friend class MainShip;
};

class Pirates : public AllEvents{

private:
    int resultEscape;
    int resultFight;
    int resultBargain;
    int resultBargainQuantity;
    bool BargainCondition;
    int PiratesChoiceNumber;
    bool PiratesChoiceNumberCorrectness;
public:

    bool PiratesEscapeKosul = 1; //pirate lerin senin kaçma durumunda yakalama durumu 1, kaçma durumu 0

    inline void EventPiratesEscape(Eventfull* object){
        std::cout<<"Korsanlardan kacmayi deniyorsunuz\n";
        while (PiratesEscapeKosul == 1){
            resultEscape = object->PiratesEscape();
            if (resultEscape == 0){
                std::cout<<"Korsanlardan kactiniz\n";
                PiratesEscapeKosul = 0; // burada korsanlardan kaçıyorsun
            }
            else {
                std::cout<<"Korsanlar sizi yakaladi.\n";
            }
        }
    }

    inline void EventPiratesFight(Eventfull* object){
        std::cout<<"Korsanlarla savasmayi sectiniz.\n";
        resultFight = object->PiratesFight();
        if (resultFight == 0){
            std::cout<<"kazandiniz\n";
        }
        else {
            object->decrementHp(30);
            std::cout<<"yenildiniz\n";
        }
    }

    inline void EventPiratesBargain(Eventfull* object){ // pazarlık edilecek miktar hesaplanır ve eğer eldeki miktar daha büyükse ödenir.
        resultBargain = object->PiratesBargain(); // daha en başında pazarlık edilip edilemeyeceği game fonksiyonunda incelenecek
        if (resultBargain == 1){
            resultBargainQuantity = 10;
        }
        else if (resultBargain == 2){
            resultBargainQuantity = 20;
        }
        else {
            resultBargainQuantity = 30;
        }
        if (object->money >= resultBargainQuantity){
            BargainCondition = 0;
            object->decrementMoney(resultBargainQuantity);
            std::cout<<"Pazarlik ettiniz ve "<<resultBargainQuantity<<" altin odediniz\n";
        }

    }

    inline void PiratesChoices(Eventfull* object){
        if (BargainCondition == 0){
            std::cout<<"Kac(1), savas(2), pazarlik et(3)(-"<<resultBargainQuantity<<"altin):";
            PiratesChoiceNumberCorrectness = false;

        }
        else {
            std::cout<<"Kac(1), savas(2), pazarlik et(3)(-"<<resultBargainQuantity<<"altin)(pazarlik edilemez, yeterli altinin yok):";
            while (PiratesChoiceNumberCorrectness == false){
                std::cin>>PiratesChoiceNumber;
                if (PiratesChoiceNumber == 1 || PiratesChoiceNumber == 2){
                    PiratesChoiceNumberCorrectness = true;
                }
                else {
                    std::cout<<"Lutfen gecerli bir sayi girin:";
                }
            }
        }
        if (PiratesChoiceNumber == 1){
            object->EventPiratesEscape(object);
        }
        else if (PiratesChoiceNumber == 2){
            object->EventPiratesFight(object);
        }
        else {
            object->EventPiratesBargain(object);
        }
    }

    friend class MainShip;
};


static constexpr float RSexapeX{1.5};
static constexpr float HSexapeX{0.5};
static constexpr float RSdamageX{1.5};
static constexpr float HSdamageX{0.5};
static constexpr int FuelDecrementor{33};


class MainShip : public AllEvents{
public:
    int fuel;
    int hp;
    int money;
    float damageX;
    float escapeX;

public:
    MainShip(){
        fuel = 99;
        hp = 100;
        money = 0;
        damageX =1;
        escapeX =1;
        std::cout << "constructor of MS" << "\n";
    }

    inline virtual void incrementMoney(){

    }
    inline virtual void decrementMoney(int DMvalue){

    }
    inline virtual void decrementFuel(){

    }
    inline virtual void decrementHp(int DHvalue){

    }


};

class Eventfull : public MainShip{
public:
    Eventfull() : MainShip(){}

};



class NormalShip : public Eventfull{

public:
    NormalShip() : Eventfull(){
        std::cout << "constructor of NS" << "\n";
    }


public:

    void incrementMoney() override{
        money = money+10;
    }

    void decrementMoney(int DMvalue) override{
        money = money - DMvalue;
    }
    void decrementFuel() override{
        fuel = fuel-FuelDecrementor;
    }
    void decrementHp(int DHvalue) override{
        hp = hp - (DHvalue*damageX);
    }



};


class RapidShip : public Eventfull{

public:
    RapidShip() : Eventfull(){
        escapeX = escapeX*RSexapeX;
        damageX = damageX*RSdamageX;
        std::cout << "constructor of RS" << "\n";
    }
    void incrementMoney() override{
        money = money+10;
    }
    void decrementMoney(int DMvalue) override{
        money = money - DMvalue;
    }
    void decrementFuel() override{
        fuel = fuel-FuelDecrementor;
    }
    void decrementHp(int DHvalue) override{
        hp = hp - (DHvalue*damageX);
    }

};


class HeavyShip : public Eventfull{
public:
    HeavyShip() : Eventfull(){
        escapeX = escapeX*HSexapeX;
        damageX = damageX*HSdamageX;
        std::cout << "constructor of HS" << "\n";
    }

    void incrementMoney() override{
        money = money+10;
    }
    void decrementMoney(int DMvalue) override{
        money = money - DMvalue;
    }
    void decrementFuel() override{
        fuel = fuel-FuelDecrementor;
    }
    void decrementHp(int DHvalue) override{
        hp = hp - (DHvalue*damageX);
    }

};


static constexpr int turn {5};

void GameFunction(Eventfull* object){

    for (int i = 0; i < turn; ++i) {
        int EventResult;
        EventResult = object->firstRandom();
        switch (EventResult) {
            case 1:
                object->EventAsteroidBelt(&object);
                break;
            case 2:
                object->EventAbandonedPlanet(&object);
                break;
            case 3:
                object->PiratesChoices(&object);
                break;
        }
    }
}



